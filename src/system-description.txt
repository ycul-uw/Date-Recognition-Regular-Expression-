#### **Overview**
The system extracts temporal named entities (e.g., dates, times, holidays) from text using regular expressions (regex). It reads input from a file, processes each line to find temporal expressions, and writes the results to an output file.

#### **Regular Expressions**
Regex was chosen for its efficiency in pattern-based text extraction. Key patterns include:

- **Fixed Dates (Full Dates)**: Captures full dates with weekdays, months, days, and years (e.g., "Monday, November 29th, 1948"). Regex ensures valid dates (days between 1-31, years ≥ 1000).
  - Example:  
    `r'\b(?:Monday|Tuesday|...)?,? (?:January|February|...) (?:0?[1-9]|[12][0-9]|3[01])(?:st|nd|rd|th)?,? (?:[1-9][0-9]{3})\b'`
  
- **MM/DD/YYYY**: Captures dates in the "MM/DD/YYYY" format with valid months, days, and years ≥ 1000.
  - Example:  
    `r'\b\d{1,2}/\d{1,2}/(?:[1-9][0-9]{3})\b'`

- **Year**: Captures years ≥ 1000.
  - Example:  
    `r'\b(?:[1-9][0-9]{3})\b'`

- **"The Xth of Month, Year"**: Captures dates like "the 13th of May, 2014".
  - Example:  
    `r'\bthe (?:0?[1-9]|[12][0-9]|3[01])(?:st|nd|rd|th)? of (?:January|February|...)'`

- **Weekdays with Ordinal Dates**: Captures expressions like "Monday the 23rd".
  - Example:  
    `r'\b(?:Monday|Tuesday|...) the (?:0?[1-9]|[12][0-9]|3[01])(?:st|nd|rd|th)?'`

- **Holidays**: Captures specific US Federal Holidays.
  - Example:  
    `r'\b(New Year\'s Day|Inauguration Day|...)'`

#### **Design Rationale**
- **Regex:** Chosen for its simplicity and efficiency in capturing various temporal patterns.
- **List Storage:** Matches are stored in a list for easy processing and writing to output.
- **File I/O:** The system reads input line-by-line to handle large files and writes extracted dates to an output file.